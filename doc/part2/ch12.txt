【12.1.6　constexpr関数】

日付：　2016.05.05、2017.03.05
バージョン：　g++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：
	テキストの記述と異なり、定数でない配列サイズがエラーとならない
	
	void f(int n)
	{
		・・・
		char a[fac(4)];
		char a2[fac(n)];
		・・・
	}
	

【12.1.8　局所静的変数の再帰呼出しによる初期化：異常終了】

日付：　2016.05.05、2017.03.05
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：
	テキストの記述と異なり、再帰呼出しによって局所静的変数を初期化すると、
	コンパイルエラーとならずに、実行時に異常終了する

	terminate called after throwing an instance of '__gnu_cxx::recursive_init_error'
	  what():  std::exception


【12.2.3　並び引数】

日付：　2016.05.06、2017.03.05
バージョン：　g++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：
	配列への参照引数の初期化でエラーが出る

	・テキストの記載に従うと、int[4]の右辺値から、非定数のint(&)[4]を
	初期化できないとのメッセージ

	f3({1,2,3,4});
		// invalid initialization of non-const reference of type 'int (&)[4]' from an rvalue of type 'int [4]'

	・関数宣言をconst参照に変更しても、以下のエラーが出る

	template<typename T, int N>
	void f3(const T (&r)[N]) { cout << "f3()\n"; }

	void g()
	{
		・・・
		f3({1,2,3,4});
			// Invalid arguments 'Candidates are: void f3(const #0 (&)[3 #1 0])	'
		・・・
	}

（追記）2017.03.05

	Ubuntu/g++環境では、上記2番めの問題はない


【12.5　noexcept指定のない関数を、noexcept関数ポインタに代入できる】

日付：　2017.03.07
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：

	テキストの記述と異なり、noexcept指定のない関数を、noexcept関数ポインタに
	代入できる。
	ビルドが通るだけでなく、実行もできる

		void ff(int) noexcept;
		void gg(int);

		void (*p1)(int) = ff;
		void (*p2)(int) noexcept = ff;
		void (*p3)(int) noexcept = gg;	//　エラーとならない

	同様に、noexceptを指定した型別名も定義できる

		using Pn = void(int) noexcept;	//　2017.03.07　エラーとならない




