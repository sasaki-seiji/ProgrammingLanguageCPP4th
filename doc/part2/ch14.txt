【14.4.4　using指令で指定した名前空間内のusing宣言とusing指令間で曖昧さが指定】

日付：　2017.03.21
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：

	using指令で指定した名前空間内のusing宣言とusing指令間で名前の曖昧さが指定される。

		namespace My_lib {
			using namespace His_lib;　//この中でVectorが定義されている
			using namespace Her_lib;　//この中でStringが定義されている

			using His_lib::String;
			using Her_lib::Vector;

			template<typename T>
			class List { };

			using Her_string = Her_lib::String;
			template<typename T>
				using His_vec = His_lib::Vector<T>;
		}

		using namespace My_lib;
		
		void g()
		{
			std::cout << "-- using name space My_lib; --\n";

			//String s = "this is a string";
				// error: reference to ‘String’ is ambiguous
			・・・
		}


	一方で、My_libで明示的に名前空間を指定すると、エラーとならない


		void f()
		{
			std::cout << "-- no using name space My_lib; --\n";

			My_lib::String s = "this is a string";

			・・・
		}


【14.4.6　namespace内のテンプレートクラスの特殊化】

日付：　2016.05.28、2017.03.21
バージョン：　g++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：

	テキストの例題で、Popularネームスペースのテンプレートクラスclass　Cの
	特殊化でコンパイルエラーが出る
	
	template<typename T>
	class Popular::C<T*> { };
		// error: specialization of 'template<class T> class Popular::V3_2::C' in different namespace [-fpermissive]

	ネームスペースに入って、特殊化を行うとコンパイルできる
	
	namespace Popular {
		template<typename T>
		class C<T*> { };
	}


【14.4.6　#include の繰り返し】

日付：2016.05.28,2017.03.21
バージョン：　g++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
追記：　2017.03.21　Unbutu/g++5.4.0環境では動作する
コメント：	

	double Popular::V3_0::f(double d) がコンパイルエラー
	
	V3_0.hのインクルード中で再度V3_common.hをインクルードするところが
	うまくいっていない模様
	
	// Popular.h
	namespace Popular {
		inline
		#include "V3_2.h"
		#include "V3_0.h"
		#include "V2_4_2.h"
	}
	
	// V3_2.h
	namespace V3_2 {
		int f(int);
		#include "V3_common.h"
	}

	// V3_common.h
	double f(double);
	template<typename T>
		class C { };

	// V3_0.h
	namespace V3_0 {
		#include "V3_common.h"
	}

	// Popular_V3_0.cpp
	double Popular::V3_0::f(double d)
	{
		cout << "Popular::V3_0::f(double: " << d << ")\n";
	}
		// Member declaration not found


