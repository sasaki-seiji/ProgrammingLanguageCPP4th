【11.2　Enode*のコンストラクタ引数の評価順、ts.current()が更新される】

日付：　2017.02.25
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：

	Enode* をnewで作成する際、コンストラクタ引数にts.current()とterm()を渡しているが、
	引数の評価順は不定のため、term()が先に評価されて、ts.current()が更新されてしまう
	以下のように修正

			Token t = ts.current();
			left = new Enode {t, left, term(true)};


【11.3.1　initialize_listのコンストラクタがprivate】

日付：　2017.02.27
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：
	initializer_listを、配列と配列要素数から初期化する宣言で、
	コンストラクタがprivateであるとのエラーメッセージが出力される

	const double temp[] = {double{1}, double{2}, 3.14};
	const initializer_list<double> tmp(temp, sizeof(temp)/sizeof(double));
		// error: ‘constexpr std::initializer_list<_E>::initializer_list(std::initializer_list<_E>::const_iterator, std::initializer_list<_E>::size_type) [with _E = double; std::initializer_list<_E>::const_iterator = const double*; std::initializer_list<_E>::size_type = long unsigned int]’ is private



【11.3.3　非修飾並び】

日付：　2016.05.01、2017.02.27
バージョン：　g++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：
	テキストの記述と異なり、+=　の右辺に非修飾｛｝並びを指定するとエラーとなる
	v = v + {88} の意味に解釈され、+演算でエラーとなる模様
	
	int v {7};
	v += {88};
		// error: invalid operands of types 'int' and '<brace-enclosed initializer list>' to binary 'operator+'


【11.4.3.1　ラムダ式と生存期間】

日付：　2016.05.02、2017.03.01
バージョン：　g++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：
	クラスオブジェクトへの非constな参照を値でキャプチャするとエラーが出る
	
		void setup2(Menu& m)
		{
			Point p1{1,2}, p2{3,4}, p3{5,6};

			m.add("draw triagle", [=]{ m.draw(p1, p2, p3); });
				// passing 'const Menu' as 'this' argument discards qualifiers [-fpermissive]
		}

	以下のように、参照としてキャプチャする必要がある
	
		m.add("draw triagle", [=, &m]{ m.draw(p1, p2, p3); });

(追記：2017.03.01）

	Menuクラスのdrawメンバ関数をconstとすれば、上記エラーは無くなる
	但し、この場合、Menuのインスタンスをコピーすることは望ましくないので
	（古い状態のactionsデータメンバをクロージャオブジェクトに不必要にコピーする）、
	参照でキャプチャしたほうが良いかも？？？

	class Menu {
	private:
		map<string, function<void()>> actions;
	public:
		void operator()(const string& label) { actions[label](); }
		void add(const string& lb, function<void()> f) { actions[lb] = f; }
		void draw(Point p1, Point p2, Point p3) const
			{ cout << p1 << ',' << p2 << ',' << p3 << '\n'; }
	};


【11.4.4　呼び出しとリターン】

日付：　2016.05.03、2017.03.02
バージョン：　g++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：
	テキストの記述と異なり、複数のreturn文を持つラムダ式のリターン型が推定されている
	
	auto z2 = [y]{ if (y) return 1; else return 2; };
	z2();


【11.4.5　ラムダ式の型】

日付：　2016.05.03、2017.03.02
バージョン：　g++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：
	テキストの記述と異なり、キャプチャを含むラムダ式から
	関数ポインタ変数を初期化することができる
	
		double (*p2)(double) = [&](double a) { return sqrt(a); };
		
	この場合、実際には何もキャプチャしていないのでコンパイルできるものと思われる
	
（追記）2017.03.02

	以下のようにキャプチャした環境を使用するとエラーとなる

	double (*p4)(double) = [&](double a) { cout << s1 << endl; return sqrt(a); };
	// error: cannot convert ‘main()::<lambda(double)>’ to ‘double (*)(double)’ in initialization

【11.5.1　{}形式の変換】

日付：　2017.03.03
バージョン：　g++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
コメント：
	テキストの記述と異なり、｛｝形式の変換がエラーとならない（ワーニングとなる）

	f(double{i});
		// warning: narrowing conversion of 'i' from 'int' to 'double' inside { } [-Wnarrowing]
	f(int{d});
		// warning: narrowing conversion of 'd' from 'double' to 'int' inside { } [-Wnarrowing]


【11.5.4　関数形式キャスト】

日付：　2016.05.04、2017.03.03
バージョン：　g++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：
	テキストの記述と異なり、関数形式(および、C言語形式も）でのchar*から
	intへのキャストがエラーとなる
	
		int b = int(p);
			// error: cast from 'char*' to 'int' loses precision [-fpermissive]
		int c = (int)p;
			// error: cast from 'char*' to 'int' loses precision [-fpermissive]

（追記）2017.03.03

	char*　→　int　変換ではなく、char*　→　long　変換とすれば、コンパイラが通る

		long lb = (long)p;
		long lc = (long)p;

