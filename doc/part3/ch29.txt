【29.2.1:　initilalizer_listからMatrixを構築するコンストラクタの削除】

日付：　2017.06.29、2017.07.09
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：

	template<typename U>
		Matrix(initializer_list<U>) = delete;

	によってinitializer_listから構築するコンストラクタを削除すると、
	N==1の場合に、Matrix_initializerから構築するコンストラクトが同一の
	引数仕様となるため、一緒に削除されてしまう

	Matrix<double,1> m1 {1,2,3};
		// error: use of deleted function ‘Matrix<T, N>::Matrix(std::initializer_list<U>) [with U = int; T = double; long unsigned int N = 1ul]’


	この条件を避けるために、コンストラクタの削除をN>1の場合に限定する

		↓

	template<typename U, size_t NN=N, typename =Enable_if<(NN>1)>>
		Matrix(initializer_list<U>) = delete;

コメント（2017.07.09追記）：

	上記でも、｛｝を使用したコピーコンストラクタの場合にも、コンストラクタ
	がdeleteされてしまう。
　　deleteしたいのは、サイズ並びのコンストラクタの場合だけなので、
	更に、以下のように変更


	template<typename U, size_t NN=N, 	typename =Enable_if<(NN>1)>,
			typename =Enable_if<Convertible<U,size_t>()>>
		Matrix(initializer_list<U>) = delete;


【29.2.1:　Matrix_refからMatrixを構築および代入するコードのバグ】

日付：　2016.11.12、2017.07.02
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
コメント：

・テキストのMatrix_refからMatrixを構築するコードには、以下の問題がある
	
	template<typename T, size_t N>
		template<typename U>
		Matrix<T,N>::Matrix(const Matrix_ref<U,N>& x)
			:desc{x.desc}, elems{x.begin(),x.end()}
		{
			static_assert(Convertible<U,T>(), "Matrix constructor: incompatible element types");
		}

	①x.descはMatrix_refのprivateメンバのため、Matrixからアクセスできない
	②Matrix_refは要素が連続配置されていないため、desc(Matrix_slice)を
	　単純にコピーできない（新規に作成されるMatrixは要素を連続的に配置する）
	③Matrix_refにbegin()、end()メンバ関数が必要（後述）
　
	この問題を対策するため、以下のように変更した
	
	template<typename T, size_t N>
		template<typename U>
		Matrix<T,N>::Matrix(const Matrix_ref<U,N>& x)
			:desc{x.descriptor().extents}, elems{x.begin(),x.end()}
		{
			static_assert(Convertible<U,T>(),
					"Matrix constructor: incompatible element types");
		}

	ここで、Matrix_slice<T,N>にarray<size_t,N>を引数に取るコンストラクタを追加

・Matrix_refをMatrixに代入する処理にも同様な問題がある
	以下のように変更
	
	template<typename T, size_t N>
		template<typename U>
		Matrix<T,N>& Matrix<T,N>::operator=(const Matrix_ref<U,N>& x)
		{
			static_assert(Convertible<U,T>(), "Matrix constructor: incompatible element types");

			desc = x.desc;
			elems.assign(x.begin(),x.end());
			return *this;
		}

		↓
		
	template<typename T, size_t N>
		template<typename U>
		Matrix<T,N>& Matrix<T,N>::operator=(const Matrix_ref<U,N>& x)
		{
			static_assert(Convertible<U,T>(),
					"Matrix =: incompatible element types");
	
			desc = x.descriptor().extents;
			elems.assign(x.begin(), x.end());
			return *this;
		}



【29.2.1:　Matrix_refの反復子の追加】

日付：　2016.11.12、2017.07.02
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：

	Matrix_refからMatrixを構築、及び、Matrix_refをMatrixに代入する際に
	Matrix_refに反復子の処理を提供する必要がある。
	
	以下のように実現：
	
	①Matrix_refの反復子クラスを提要
	②Matrix_refクラスに、反復子を返すbegin()と、end()を追加
		反復子は、Matrix_ref自体を変更しないのでbegin、endはconstメンバ関数とする

	①の反復子クラスは以下のように定義
	
		template<typename T, size_t N>
		class Matrix_ref_iterator : public iterator<forward_iterator_tag, T> {
		public:
			static Matrix_ref_iterator begin(const Matrix_ref<T,N>* t);
			static Matrix_ref_iterator end(const Matrix_ref<T,N>* t);

			Matrix_ref_iterator& operator++();
			T& operator*()
				{ return *(target->data() + target->descriptor().offset(pos)); }
			bool operator!=(const Matrix_ref_iterator& o)
				{ return !(pos == o.pos && ov == o.ov); }

		private:
			Matrix_ref_iterator(const Matrix_ref<T,N>* t, bool ov = false)
				: target{t}, ov{ov} { fill(pos.begin(), pos.end(), 0); }

			const Matrix_ref<T,N> *target;
			array<size_t, N> pos;
			bool ov;
		};
	

	ここで、反復子は、反復対象のMatrix_refへのポインタ(target)と、
	今どこを反復しているかを示すarray型のインデックス（pos）を
	データメンバとして保持する。
	
	反復子の前進操作は、最下位のインデックス値から順次インクリメントする

		template<typename T, size_t N>
		Matrix_ref_iterator<T,N>& Matrix_ref_iterator<T,N>::operator++()
		{
			for (int i = N-1; i >= 0; --i) {
				if (++pos[i] < target->descriptor().extents[i]) return *this;
				pos[i] = 0;
			}
			ov = true;
			return *this;
		}
	

【29.2.2:　Matrix_initializerからMatrix_refへの代入演算】

日付：　2016.11.10、2016.11.20、2017.07.02
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：

	29.2.2「添え字演算とスライシング」　の例題
	
		Matrix<int,2> m2 {
			{01,02,03},
			{11,12,13},
			{21,22,23}
		};
		m2(slice{1,2},slice{0,3}) = {
				{111,112,113},
				{121,122,123}
		};
	
	にて、m2(slice{1,2},slice{0,3})は、Matrix_ref<int,2>であり、代入の右辺は
	Matrix_initializer<int,2>である
	
	以下のようにして代入演算子を実装する
		
		template<typename T, size_t N>
		Matrix_ref<T,N>& Matrix_ref<T,N>::operator=(Matrix_initializer<T,N> init)
		{
			array<size_t, N> extents = Matrix_impl::derive_extents<N>(init);
			assert(extents == desc.extents);

			iterator it = begin();
			Matrix_impl::copy_flat(init, it);

			return *this;
		}
		
	ここではまず、Matrix_impl::derive_extents<N>(init)を呼び出して、代入元の
	Matrix_initializerが正しいフォーマットを持っているかを確認する。
	そして、Matrix_impl::copy_flat(init, it)を呼び出し、Matrix_initializerの
	各要素を、Matrix_refの要素としてコピーする
	
	copy_flatは以下のようにして実装する

		template<typename T, typename Iter>
		void Matrix_impl::copy_flat(initializer_list<T> list, Iter& it)
		{
			copy_list(list.begin(), list.end(), it);
		}

		template<typename T, typename Iter>
		void Matrix_impl::copy_list
		(const initializer_list<T>* first, const initializer_list<T>* last, Iter& it)
		{
			for ( ; first != last; ++first)
				copy_list(first->begin(), first->end(), it);
		}

		template<typename T, typename Iter>
		void Matrix_impl::copy_list(const T* first, const T* last, Iter& it)
		{
			it = copy(first, last, it);
		}

	
	copy_flatが呼び出すcopy_listは、ネストしたinitializer_listを再帰的に処理する
	initializer_listが末端要素に到達すれば、多重定義したcopy_listが、
	it（Matrix_ref_iteratorのインスタンス）を通じて、Matrixに要素を順次代入する


【29.3.2:　Matrixの混合演算の関数テンプレート宣言の誤り】

日付：　2016.11.11、2016.11.18、2017.07.03
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：

	Matrixの混合演算関数テンプレート関数の宣言に誤りがある

		typename RT = Matrix<Common_type<Value_type<T>,Value_type<T2>>,N>>
	の箇所は、
		typename RT = Common_type<T,T2>>
	でなければならない
	
		template<typename T, typename T2, size_t N,
			//typename RT = Matrix<Common_type<Value_type<T>,Value_type<T2>>,N>>
			typename RT = Common_type<T,T2>>
		Matrix<RT,N> operator+(const Matrix<T,N>& a, const Matrix<T2,N>& b)
		{
			Matrix<RT,N> res = a;
			res+=b;
			return res;
		}

【29.3.2:　Matrixの混合演算実現のため、他の型のMatrixからのコンストラクタが必要】

日付：　2016.11.11、2016.11.20、2017.07.03
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：

	Matrixの混合演算を実現するため、他の型を要素とするMatrixを引数とする
	Matrixのコンストラクタが必要となる。
	
	以下の混合演算において、Matrix<RT,N> res = a;　の行が該当する

	
		template<typename T, typename T2, size_t N,
			typename RT = Common_type<T,T2>>
		Matrix<RT,N> operator+(const Matrix<T,N>& a, const Matrix<T2,N>& b)
		{
			Matrix<RT,N> res = a;
			res+=b;
			return res;
		}

	Matrixクラスに以下のメンバを追加
	
		// 2016.11.11 add
		template<typename U>
			Matrix(const Matrix<U,N>&);
		template<typename U>
			Matrix& operator=(const Matrix<U,N>&);


【29.4.5:　Matrix::rowテンプレート関数の部分特殊化】

日付：　2016.11.06、2016.11.22、2017.06.30
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：

	テンプレート関数の部分特殊化は文法上許されていない。
	そのため、Matrix::row<T,1>は以下のエラーが出力されて、コンパイルされない
	
		template<typename T>
		T& Matrix<T,1>::row(size_t i)
		{
			return elem[i];
		}
			↓
		error: invalid use of incomplete type 'class Matrix<T, 1ull>'
 		T& Matrix<T,1>::row(size_t i)

	ここでは、Matrix_ref<T,0>の特殊化されたテンプレートクラスを定義することで
	Matrix_ref<N-1,T>& Matrix<T,N>::row(size_t)　がN=1の時にも対応可能とする
	
		// Matrix<T,N>の行を参照するMatrix_ref<N-1,T>を返す
		template<typename T, size_t N>
		Matrix_ref<T,N-1> Matrix<T,N>::row(size_t n)
		{
			assert(n<rows());
			Matrix_slice<N-1> row;
			Matrix_impl::slice_dim<0>(n,desc,row);
			return {row,data()};
		}

		// Matrix_ref<T,N> の　N=0 の時の特殊化
		//	Matrix<T,1>::row(size_t),　Matrix_ref<T,1>::row(size_t)のリターン値となる
		template<typename T>
		class Matrix_ref<T,0> {
		public:
			static constexpr size_t order = 0;
			using value_type = T;
	
			Matrix_ref(const Matrix_slice<0>& s, T* p) :ptr{p + s.start} {}

			T& operator()() { return *ptr; };
			const T& operator()() const { return *ptr; }

			operator T&() { return *ptr; }
			operator const T&() const { return *ptr; }

		private:
			T* ptr;
		};


	ここで、Matrix_ref<T,0>::descは、startが正しいオフセット、sizeが1、
	extentsとstridesが空の(size()が0）のstd::arrayとなるように
	Matrix_impl::slice_dim<0>(n,desc,row)　が計算する（自然とそうなる）
	
	

【29.5.1:　ガウスの消去法：dot_productの引数のミスマッチ】

日付：　2016.11.23
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
コメント：

	Matrixの乗算の内部で使用している、テンプレート関数dot_product()を
	ガウスの消去法のback_substitutionの内部で利用しているが、引数型の
	ミスマッチが発生する。
	
		Vec back_substitution(const Mat2d& A, const Vec& b)
		{
			const size_t n = A.rows();
			Vec x(n);
	
			for (size_t i = n-1; i>= 0; --i) { // ?
				double s = b(i) - dot_product(A[i](slice(i+1)),x(slice(i+1)));
				if (double m = A(i,i))
					x = s/m;
				else
					throw Back_subst_failure(i);
			}
			return x;
		}

		↓
error: no matching function for call to 'dot_product(Estd::Enable_if<true, Matrix_ref<const double, 1ull> >, Estd::Enable_if<true, Matrix_ref<double, 1ull> >)'

	dot_productの定義は、
	
		template<typename T>
		T dot_product(const Matrix_ref<T,1>& a, const Matrix_ref<T,1>& b)
		{
			return std::inner_product(a.begin(),a.end(),b.begin(),0.0);
		}

	であるが、上記の利用では、引数が、Matrix_ref<const double,1>, 
	Matrix_ref<double,1> となり、テンプレート関数にマッチしない
	
	以下のように、dot_productを混合演算（constと非constの混合を含む）に
	対応することで対策
	
		template<typename T1, typename T2, typename RT=Common_type<T1,T2>>
		RT dot_product(const Matrix_ref<T1,1>& a, const Matrix_ref<T2,1>& b)
		{
			return std::inner_product(a.begin(),a.end(),b.begin(),0.0);
		}


【29.5.4:　MVmulVadd::operator Vec() と Vec::Vec(const MVmulVadd&)がバッティング】

日付：　2016.11.23
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
コメント：

	VecをMVmulVaddで初期化する際に、MVmulVadd::operator Vec() と 
	Vec::Vec(const MVmulVadd&)がバッティングし、コンパイルエラーが発生する
	
		Vec U = M*V+W;
			↓
C:\books\ProgrammingLanguageCPP4th\part3\ch29\29-5-4-composite-operation\Debug/../src/main.cpp:23: undefined reference to `MVmulVadd::operator Matrix<double, 1ull>()'

	MVmulVadd::operator Vec() を削除することで解決
	
	
