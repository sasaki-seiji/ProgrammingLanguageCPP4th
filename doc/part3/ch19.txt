【19.2.1　添え字演算子：ローカルコピーの参照を返している】

日付：　2016.08.11、2017.04.14
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：
	テキストのAssoc::operator[]のコードは、vectorの要素のローカルコピーを
	返しているため、実行時、システムエラーとなる

	//for (auto x : vec)
	for (auto& x : vec)
		// warning: reference to local variable 'x' returned [-Wreturn-local-addr]
		if (s == x.first) return x.second;

（追記）2017.04.14　Linug/g++環境では、-1でterminatededする


【19.2.2　関数呼び出し演算子：｛｝並びを右辺に持つ+=演算子】

日付：　2016.08.11
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
コメント：
	
	テキストのラムダ関数の例で、｛｝並びを右辺に持つ、complexの+=演算子が
	コンパイルエラーとなる
	
	//for_each(vec.begin(), vec.end(),[](complex<double>& a){ a+={2,3}; });
	for_each(vec.begin(), vec.end(),[](complex<double>& a){ a+=complex<double>{2,3}; });
		// error: no match for 'operator+=' (operand types are 'std::complex<double>' and '<brace-enclosed initializer list>')

【19.2.2　関数呼び出し演算子：ラムダ式のキャプチャリスト】

日付：　2016.08.11
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
コメント：
	
	テキストのラムダ関数の例で、キャプチャリストの指定抜け
	
	//for_each(lst.begin(), lst.end(),[](complex<double>& a){ a+=z; });
	for_each(lst.begin(), lst.end(),[z](complex<double>& a){ a+=z; });
		// error: 'z' is not captured

【19.2.5 大域のdelete演算子の引数】

日付：　2016.08.15
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
コメント：

	テキストの記述と異なり、大域のdelete演算子には、size_t引数を指定しない

	::operator delete(p, s);
		↓
　　error: invalid conversion from 'std::size_t {aka long long unsigned int}' to 'void*' [-fpermissive]

【19.2.6 complexのリテラル】

日付：　2016.08.16
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
コメント：

	テキストの記述と異なり、2+1iでは、ユーザ定義リテラルiを認識しない

		error: unable to find numeric literal operator 'operator""i'
	
	さらに、2+1.0iとすると、整数とcomplexの混合演算が解決できない
	
		no match for 'operator+' (operand types are 'int' and 'std::complex<double>')


【19.3.4:　ムーブコンストラクタ、ムーブ代入のコンパイルエラー】

日付：　2016.08.18
バージョン：　gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0
コメント：

	テキストのムーブコンストラクタとムーブ代入では、引数で渡された
	右辺値参照参照引数をmove_fromにそのまま渡すとコンパイルエラーとなる
	（再度、move()関数を適用する必要がある）
	
	String::String(String&& x)
	{
		//move_from(x);
		move_from(move(x));
			// error: cannot bind 'String' lvalue to 'String&&'
	}

