【履歴】

第2章　C++を探索しよう：基本

	2016.03.15、2016.03.18、2016.03.19　2.2:基本
	2016.03.20	2.3:ユーザ定義型、2.4:モジュール性
	2017.01.30、2017.01.31	Linux環境に対応

第3章　C++を探索しよう：抽象化のメカニズム

	2016.03.20、2016.03.22、2016.03.24、2016.03.26	3.2:クラス
	2016.03.27	3.3:コピーとムーブ
	2016.03.27、2016.03.28、2016.03.30、2016.04.02	3.4:テンプレート
	2017.02.01、2017.02.02	Linux環境に対応

第4章　C++を探索しよう：コンテナとアルゴリズム

	2016.04.02	4.2:文字列
	2016.04.02	4.3:ストリーム入出力
	2016.04.02	4.4:コンテナ
	2016.04.03	4.5:アルゴリズム
	2017.02.03、2017.02.04	Linux環境に対応

第5章　C++を探索しよう：並列処理とユーティリティ

	2016.04.03	5.2:資源管理
	2016.04.03、2016.04.04、2016.04.05	5.3:並行処理
	2016.04.05、2016.04.06、2016.04.07	5.4:小規模ユーティリティ
	2016.04.07	5.5:正規表現
	2016.04.07、2016.04.08	5.6:数学ライブラリ
	2017.02.05、2017.02.06、2017.02.07	Linux環境に対応
	
第6章　型と宣言

	2016.04.09	6.2:型
	2016.04.09、2016.04.10、2016.04.11	6.3:宣言
	2016.04.12	6.4:オブジェクトと値、6.5:型別名
	2017.02.08、2017.02.09、2017.02.10、2017.02.11	Linux環境に対応

第7章　ポインタと配列と参照

	2016.04.13	7.2:ポインタ
	2016.04.13、2016.04.14	7.3:配列
	2016.04.15、2016.04.16	7.4:配列の内部を指すポインタ
	2016.04.16	7.5:ポインタとconst、7.6:ポインタと所有権
	2016.04.17	7.7:参照
	2017.02.12、2017.02.13、2017.02.14	Linux環境に対応

第8章　構造体と共用体と列挙体

	2016.04.17、2016.04.18、2016.04.20、2016.04.21	8.2:構造体
	2016.04.21、2016.04.22	8.3:共用体
	2016.04.23	8.4:列挙体
	2016.12.15	「8.2.6:POD」の例題を詳細化(is_podを構成要素に分解)
	2017.02.15、2017.02.16、2017.02.18	Linux環境に対応

第9章　文

	2016.04.23	9.3:文としての宣言
	2016.04.23、2016.04.24	9.4:選択文
	2016.04.24	9.5:繰り返し文、9.6:goto文
	2017.02.19	Linux環境に対応
	
第10章　式

	2016.04.24、2016.04.25	10.2:電卓プログラム
	2016.04.25、2016.04.26	10.3:演算子の概要
	2016.04.26、2016.04.27、2016.04.28、2016.04.29	10.4:定数式
	2016.04.29	10.5:暗黙の型変換
	2017.02.19、2017.02.21、2017.02.22、2017.02.23、2017.02.24	Linux環境に対応
	
第11章　主要な演算子

	2016.04.29	11.1:いろいろな演算子
	2016.04.29、2016.04.30	11.2:空き領域
	2016.05.01、2016.05.02	11.3:並び
	2016.05.02、2016.05.03	11.4:ラムダ式
	2016.05.03、2016.05.04	11.5:明示的型変換
	2017.02.25、2017.02.26、2017.02.27、2017.02.28、2017.03.01、2017.03.02、
	2017.03.03	Linux環境に対応

第12章　関数

	2016.05.05	12.1:関数宣言
	2016.05.05、2016.05.06、2016.05.07	12.2:引数の受け渡し
	2016.05.08	12.3:関数多重定義
	2016.05.08、2016.05.11	12.5:関数へのポインタ
	2016.05.12	12.6:マクロ
	2017.03.04、2017.03.05、2017.03.06、2017.03.07、2017.03.08	Linux環境に対応
	
第13章　例外処理

	2016.05.13、2016.05.14	13.1:エラー処理
	2016.05.14、2016.05.15	13.3:資源管理
	2016.05.16、2016.05.17	13.4:不変条件の強制
	2016.05.17、2016.05.18、2016.05.19、2016.05.20	13.5:例外の送出と捕捉
	2016.05.21、2016.05.22	13.6:vectorの実装
	2017.03.09、2017.03.11、2017.03.12、2017.03.13、2017.03.14、2017.03.15、
	2017.03.16、2017.03.17、2017.03.18	Linux環境に対応

第14章　名前空間

	2016.05.23	14.2:名前空間
	2016.05.24	14.3:モジュール化とインタフェース
	2016.05.26、2016.05.27、2016.05.28	14.4:名前空間を用いた構成
	2017.03.20、2017.03.21、2017.03.22	Linux環境に対応

第15章　ソースファイルとプログラム

	2016.07.09、2016.07.10	15.2:結合
	2016.07.11、2016.07.13	15.3:ヘッダの利用
	2016.07.13、2016.07.15	15.4:プログラム
	2017.03.22、2017.03.23、2017.03.24、2017.03.25	Linux環境に対応


第III部　抽象化のメカニズム

第16章　クラス

	2016.07.15、2016.07.16、2016.07.18、2016.07.19	16.2:クラスの基礎
	2016.07.20、2016.07.21、2016.07.22	16.3:具象クラス
	2017.03.25、2017.03.26、2017.03.27、2017.03.28	Linux環境に対応

	
第17章　構築と後始末とコピーとムーブ

	2016.07.22	17.1:はじめに
	2016.07.22、2016.07.24	17.2:コンストラクタとデストラクタ
	2016.07.24、2016.07.25、2016.07.26、2016.07.27、2016.07.28
				17.3:クラスオブジェクトの初期化
	2016.07.28、2016.07.29、2016.07.30	17.4:メンバと基底の初期化
	2016.07.30、2016.07.31	17.5:コピーとムーブ
	2016.08.01、2016.08.05	17.6:デフォルト演算の生成
	2017.03.29、2017.03.30、2017.03.31、2017.04.01、2017.04.03、
	2017.04.04、2017.04.08	Linux環境に対応
	

第18章　演算子の多重定義

	2016.08.06	18.1:はじめに、18.2:演算子関数
	2016.08.06、2016.08.07、2016.08.08、2016.08.09	18.3:複素数型
	2016.08.10	18.4:型変換
	2017.04.09、2017.04.10、2017.04.11、2017.04.12	Linux環境に対応
	

第19章　特殊な演算子

	2016.08.11、2016.08.15、2016.08.16	19.2:特殊な演算子
	2016.08.17、2016.08.18	19.3:文字列クラスString
	2016.08.18、2016.08.19	19.4:フレンド
	2017.04.14、2017.04.15、2017.02.16　Linux環境に対応

	
第20章　派生クラス

	2016.08.21	20.2:派生クラス
	2016.08.21、2016.08.22、2016.08.23、2016.08.24	20.3:クラス階層
	2016.08.24	20.4:抽象クラス
	2016.08.26、2016.08.27	20.5:アクセス制御
	2016.08.27	20.6:メンバへのポインタ
	2017.04.16、2017.04.18、2017.04.19、2017.04.20、2017.04.21、
	2017.04.22　Linux環境に対応


第21章　クラス階層

	2016.08.27、2016.08.28	21.2:クラス階層の設計
	2016.08.29、2016.08.30、2016.09.01、2016.09.02	21.3:多重継承
	2017.04.22、2017.04.24、2017.04.28、2017.04.29、2017.04.30、2017.05.02、
	2017.05.03、2017.05.04、2017.05.05	Linux環境に対応


第22章　実行時型情報

	2016.09.03、2016.09.04	22.2:クラス階層の移動
	2016.09.04	22.3:ダブルディスパッチとVisitorパターン
	2016.09.04、2016.09.05	22.5:型の識別
	2016.09.05	22.6:RTTIの利用と悪用
	2017.05.06、2017.05.07、2017.05.08、2017.05.09、2017.05.10	Linux環境に対応
	
第23章　テンプレート

	2016.09.08、2016.09.09、2016.09.10	23.2:単純な文字列テンプレート
	2016.09.10	23.3:型チェック
	2016.09.11、2016.09.12、2016.09.13	13.4:クラステンプレートのメンバ
	2016.09.13、2016.09.14、2016.09.15、2016.09.16、2016.09.17	23.5:関数テンプレート
	2016.09.17	23.6:テンプレート別名
	2016.09.17	23.7:ソースコードの構成
	2017.05.11、2017.05.13、2017.05.14、2017.05.16	Linux環境に対応

第24章　ジェネリックプログラミング

	2016.10.18	24.2:アルゴリズムとリフティング
	2016.10.22、2016.10.23、2016.10.24、2016.10.25、2016.10.26、2016.10.27
	2016.10.28、2016.10.29、2016.10.29	24.4:コンセプトの具現化
	2017.06.11、2017.06.12、2017.06.16、2017.06.17、2017.06.18、2017.06.19
	2017.06.20、2017.06.21、2017.06.22、2017.06.23、2017.06.24、2017.06.25
	Linux環境に対応
	
第25章　特殊化

	2016.09.17、2016.09.18、2016.09.19	25.2:テンプレートの仮引数と実引数	
	2016.09.19、2016.09.20、2016.09.22	25.3:特殊化
	2017.06.03、2017.06.04、2017.06.05、2017.06.06、2017.06.07、2017.06.08
	2017.06.09、2017.06.10、2017.06.11	Linux環境に対応
	
第26章　具現化

	2016.09.23、2016.09.24	26.2:テンプレート具現化
	2016.09.24、2016.09.25	26.3:名前バインド
	2017.06.01、2017.06.02、2017.06.03	Linux環境に対応
	
第27章　テンプレートと階層

	2016.09.27、2016.09.28	27.2:パラメータ化と階層
	2016.09.30	27.3:クラステンプレートの階層
	2016.10.01	27.4:基底クラスとしてのテンプレート
		（27.4.2:「クラス階層の線形化」はスキップ）

第28章　メタプログラミング

	2016.10.03、2016.10.04、2016.10.05	28.2:型関数
	2016.10.06、2016.10.07	28.3:制御構造
	2016.10.08、2016.10.09、2016.10.10、2016.10.11、2016.10.12	28.4:条件付き定義：Enable_if
	2016.10.13、2016.10.14	28.5:コンパイル時リスト：Tuple
	2016.10.15、2016.10.16	28.6:可変個引数テンプレート
		（28.6.4:「標準ライブラリのtuple」は省略）
	2017.05.30、2017.05.31	28.6.4:「標準ライブラリのtuple」
	2016.10.17	28.7:SI単位系の例題
	2017.05.17、2017.05.19、2017.05.20、2017.05.21、2017.05.24、2017.05.25、
	2017.05.26、2017.05.28、2017.05.30、2017.05.31	Linux環境に対応


第29章　行列の設計

	2016.10.30、2016.11.06、2016.11.08、2016.11.09、2016.11.10	29.1:初めに
	2016.10.30、2016.11.10、2016.11.11、2016.11.12、2016.11.13、2016.11.14、
	2016.11.15	29.2:Matrixテンプレート
	2016.10.31、2016.11.01、2016.11.10、2016.11.11、2016.11.16、2016.11.17
	2016.11.18	29.3.Matrixの算術演算
	2016.11.03、2016.11.05、2016.11.06、2016.11.07、2016.11.08、2016.11.09、
	2016.11.10、2016.11.11、2016.11.19、2016.11.20、2016.11.21、2016.11.22
	2016.11.23	29.4:Matrixの実装
	2016.11.23	29.5:線形方程式の解
	

第IV部

第31章　STLコンテナ

	2016.11.24	31.2:コンテナの概要
	2016.11.25	31.3:処理の概要
	2016.11.26、2016.11.27	31.4:コンテナ
	2016.11.27	31.5:コンテナアダプタ
	

第32章　STLアルゴリズム

	2016.11.27	32.2:アルゴリズム、32.3:ポリシー引数
	2016.11.27、2016.11.28	32.4:シーケンスを更新しないアルゴリズム
	2016.11.29、2016.11.30	32.5:シーケンスを更新するアルゴリズム
	2016.12.01、2016.12.02	32.6:ソートと探索
	2016.12.03	32.7:最小値と最大値
	
	
第33章　STL反復子

	2016.12.03	33.1:初めに、33.2:反復子アダプタ
	2016.12.04	33.3:範囲アクセス関数、33.4:関数オブジェクト、33.5:関数アダプタ
	

第34章　メモリと資源

	2016.12.05、2016.12.06	34.2:”コンテナ相当”
	2016.12.07、2016.12.08、2016.12.09	34.3:資源管理ポインタ
	2016.12.10、2016.12.11、2016.12.12、2016.12.13	34.4:アロケータ
	2016.12.11	34.5:ガーベジコレクションインターフェース　は省略
	2016.12.11	34.6:未初期化メモリ
	

第35章　ユーティリティ

	2016.12.13	35.2:時刻
	2016.12.14	35.3:コンパイル時の有理数演算
	2016.12.14、2016.12.15、2016.12.16、2016.12.17	35.4:型関数
	2016.12.17	35.5:小規模なユーティリティ

第36章　文字列

	2016.12.17、2016.12.18、2016.12.20	36.3:文字列
	
	
第37章　正規表現

	2016.12.21	37.1:正規表現、37.2:regex
	2016.12.21、2016.12.23	37.3:正規表現の関数
	2016.12.23	37.4:正規表現の反覆子
	
第38章　入出力ストリーム

	2016.12.24	38.2:入出力ストリームの階層
	2016.12.25	38.3:エラー処理
	2016.12.25、2016.12.26、2016.12.27	38.4:入出力処理
	2016.12.27、2016.12.30	38.5:ストリーム反復子
	2016.12.29	38.6:バッファリング
	

第39章　ロケール

	2017.01.07、2017.01.08	39.1:文化的な以外の取り扱い
	2016.12.31、2017.01.02、2017.01.08	39.2:localeクラス
	2017.01.06	39.3:facetクラス
	2017.01.02、2017.01.03、2017.01.04、2017.01.05、2017.01.06、2017.01.07、
	2017.01.08、2017.01.09、2017.01.10	39.4:標準facet
	2017.01.10	39.5:便利なインタフェース

第40章　数値演算

	2017.01.11	40.2:数値の限界、40.3:標準数学関数
	2017.01.12	40.4:複素数
	2017.01.12、2017.01.13、2017.01.14	40.5:数値配列：valarray
	2017.01.14	40.6:汎用数値アルゴリズム
	2017.01.14、2017.01.15	40.7:乱数

第41章　並行処理

	2017.01.16	41.2:メモリモデル
	2017.01.17	41.3:アトミック性

第42章　スレッドとタスク

	2017.01.18、2017.01.19、2017.01.20,2017.01.21	42.2:スレッド
	2017.01.21、2017.01.22、2017.01.23、2017.01.24、2017.01.25	42.3:データ競合の回避
	2017.01.26、2017.01.28	42.4:タスクベースの並行処理


＠＠　環境　＠＠

【Ubuntu環境】

	Ubuntu:	#74-Ubuntu SMP Fri Dec 2 15:59:10 UTC 2016
	コンパイラ：g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
	eclipse：Version: Mars.2 Release (4.5.2)
	
＠＠　参考　＠＠	

	cplusplus.com Referecne
	http://www.cplusplus.com/reference/

	cpprefjp - C++日本語リファレンス   リファレンス
	https://cpprefjp.github.io/reference.html


＠＠　セットアップ　＠＠
【Pleiadesのアップデート】
日付：　2016.03.23
コメント：

	Pleiadesを、pleiades-e4.5-cpp-jre_20160312.zip　にアップデート
	今回は、C/C++　FullEditionを導入したため、MinGWも更新
	MinGWのバージョンは、
		g++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 5.3.0

	バージョンをアップしても、
		「Ohter　dialect　flag」に　-std=c++11　を入力
		「プリプロセッサ」に　__cplusplus=201103L　を入力
	しないとうまく動作しない（コンパイル時のエラーが表示される）


＠＠　Usage　＠＠


