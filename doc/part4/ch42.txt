【42.3.4:　mainスレッドで条件変数を待つことができない】

日付：　2017.01.23
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：

	mainスレッドで条件変数を待つことができない
	テキストの例では、

	void simple_timer(int delay)
	{
		condition_variable timer;
		mutex mtx;
		auto t0 = steady_clock::now();
		unique_lock<mutex> lck(mtx);
		timer.wait_for(lck,milliseconds{delay});
		auto t1 = steady_clock::now();
		cout << duration_cast<milliseconds>(t1-t0).count() << " milliseconds passed\n";
	}

	int main()
	{
		simple_timer(1);
		simple_timer(10);
		simple_timer(100);
		simple_timer(1000);
	}

	とすると、mainがブロックされず、0 milliseconds と出力される
	以下のようにmain以外のスレッドからsiple_timerを呼び出すと
	ブロックされる

	void task()
	{
		simple_timer(1);
		simple_timer(10);
		simple_timer(100);
		simple_timer(1000);
	}

	int main()
	{
		thread th{task};
		th.join();
	}


【42.4.3:　mainスレッドでpackaged_taskを呼び出すとエラーとなる】

日付：　2017.01.26
バージョン：　g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
コメント：

	mainスレッドでpackaged_taskを呼び出すとエラーとなる。
	テキストの例では、

	void test_packaged_task()
	{
		packaged_task<int(int)> pt1 {ff};
		packaged_task<int(int)> pt2 {ff};

		pt1(1);
		pt2(0);

		auto v1 = pt1.get_future();
		auto v2 = pt2.get_future();

		try {
			cout << v1.get() << '\n';
			cout << v2.get() << '\n';
		}
		catch (exception& e) {
			cout << "exception1: " << e.what() << '\n';
		}
	}

	int main()
	{
	#if 0
		test_packaged_task();
	#else
		thread th {test_packaged_task};
		th.join();
	#endif
		return 0;
	}

	のように、mainとは別のスレッドでpackaged_taskを呼び出す必要がある



